{"version":3,"sources":["components/Filter.js","components/NewContact.js","components/Numbers.js","services/contacts.js","components/App.js","index.js"],"names":["Filter","value","onChange","NewContact","addName","nameValue","onChangeName","numberValue","onChangeNumber","onSubmit","type","Numbers","list","newFilter","handleDeleteReq","console","log","filter","name","toLowerCase","includes","map","x","key","number","onClick","baseUrl","axios","get","newObject","post","id","put","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setNewFilter","statusMessage","setStatusMessage","statusType","setStatusType","useEffect","contactService","then","response","data","message","className","event","target","preventDefault","find","p","person","window","confirm","setTimeout","catch","error","nameObject","concat","props","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52a89729.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Filter = ({value, onChange}) => {\n    return (\n    <form>\n        <div>\n            Filter phonebook: <input\n                value={value}\n                onChange={onChange}\n            />\n        </div>\n        \n    </form>\n    )\n}\n\nexport default Filter","import React from 'react'\n\n\nconst NewContact = ({addName, nameValue, onChangeName, numberValue, onChangeNumber}) => {\n    return (\n        <form onSubmit={addName}>\n\n        <div>\n            name: <input\n                value={nameValue}\n                onChange={onChangeName}\n            />\n        </div>\n        <div>\n            number: <input\n                value={numberValue}\n                onChange={onChangeNumber}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n    )\n}\n\nexport default NewContact","import React from 'react'\n\n\nconst Numbers = ({list, newFilter, handleDeleteReq}) => {\n    console.log(list)\n    return (\n    <div> \n        {list.filter(value => value.name.toLowerCase().includes(newFilter.toLowerCase())).map((x) =>\n                    <p key={x.name}> {x.name} {x.number} <button onClick={() => handleDeleteReq(x)}>delete</button></p>\n                )}\n        </div>\n    )\n}\n\nexport default Numbers","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n  }\n\n  const create = newObject => {\n    return axios.post(baseUrl, newObject)\n  }\n  \n  const update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n  }\n\n  const poisto = (id, newObject) =>{\n     return axios.delete(`${baseUrl}/${id}`, newObject)\n     \n  }\n  \n  export default { \n    getAll: getAll, \n    create: create, \n    update: update, \n    poisto: poisto\n  }","import React, { useState, useEffect } from 'react';\nimport Filter from './Filter';\nimport NewContact from './NewContact';\nimport Numbers from './Numbers';\nimport contactService from '../services/contacts';\nimport './App.css'\n \n \nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [newFilter, setNewFilter] = useState('')\n    const [statusMessage, setStatusMessage] = useState(null)\n    const [statusType, setStatusType] = useState(null)\n    \n \n    const Notification = ({ message }) => {\n        if (message === null) {\n            return null\n        }\n \n        return (\n            <div className={statusType}>\n                {message}\n            </div>\n        )\n    }\n\n \n    useEffect(() => {\n        contactService\n            .getAll()\n            .then(response => {\n                setPersons(response.data)\n \n            })\n    }, [])\n \n \n    const addName = (event) => {\n        event.preventDefault()\n        if (persons.find(p => p.name.toLowerCase() === newName.toLowerCase())) {\n            let person = persons.find(p => p.name.toLowerCase() === newName.toLowerCase())\n            if (window.confirm(`${person.name} is already added to phonebook, replace the old number with a new one?`)) {\n                person.number = newNumber\n                contactService\n                    .update(person.id, person)\n                    .then(person => {\n                        setStatusType('success')\n                        setStatusMessage(\n                            `information for ${newName} was updated`\n                        )\n                        setTimeout(() => {\n                            setStatusMessage(null)\n                        }, 5000)\n                    }).catch(error => {\n                        console.log(error.response.data.error)\n                        setStatusType('error')\n                        setStatusMessage(\n                            error.response.data.error\n                          )\n                          setTimeout(() => {\n                            setStatusMessage(null)\n                        }, 5000)\n                    })\n            }\n        } else {\n            const nameObject = {\n                name: newName,\n                number: newNumber\n            }\n            contactService\n                .create(nameObject)\n                .then(nameObject => {\n                    setPersons(persons.concat(nameObject.data))\n                    setStatusType('success')\n                    setStatusMessage(\n                        `${newName} was added to phonebook`\n                    )\n                    setTimeout(() => {\n                        setStatusMessage(null)\n                    }, 5000)\n                }).catch(error => {\n                    console.log(error.response.data.error)\n                    setStatusType('error')\n                    setStatusMessage(\n                        error.response.data.error\n                      )\n                      setTimeout(() => {\n                        setStatusMessage(null)\n                    }, 5000)\n                })\n            \n        }\n        setNewName('')\n        setNewNumber('')\n    }\n \n    const handleDeleteReq = (props) => {\n \n        if (window.confirm(`Are you sure you want to delete ${props.name}?`)) {\n            contactService\n                .poisto(props.id)\n                .then(nameObject => {\n                    setPersons(persons.filter(p => p.id !== props.id))\n                    setStatusMessage(\n                        `${props.name} was removed from phonebook`\n                    )\n                    setStatusType('success')\n                    setTimeout(() => {\n                        setStatusMessage(null)\n                    }, 5000)\n                }).catch(error => {\n                    console.log(error.response.data.error)\n                    setStatusType('error')\n                    setStatusMessage(\n                        error.response.data.error\n                      )\n                      setTimeout(() => {\n                        setStatusMessage(null)\n                    }, 5000)\n                })\n               \n        }\n \n    }\n \n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n \n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n \n    const handleFilterChange = (event) => {\n        setNewFilter(event.target.value)\n    }\n \n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={statusMessage} />\n            <Filter value={newFilter} onChange={handleFilterChange} />\n            <h2>Add new contact</h2>\n            <NewContact addName={addName} nameValue={newName} onChangeName={handleNameChange} numberValue={newNumber} onChangeNumber={handleNumberChange} />\n            <h2>Numbers</h2>\n            <Numbers list={persons} newFilter={newFilter} handleDeleteReq={handleDeleteReq} />\n        </div>\n    )\n}\n \nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}